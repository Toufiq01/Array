class Solution {
    public boolean arrayStringsAreEqual(String[] word1, String[] word2) {
        StringBuilder a = new StringBuilder();
        StringBuilder b = new StringBuilder();
        for(String s: word1){
            a.append(s);
        }
        for(String s: word2){
            b.append(s);
        }
        return a.toString().equals(b.toString());
    }
}
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Check If Two String Arrays are Equivalent.
// Memory Usage: 37.2 MB, less than 57.14% of Java online submissions for Check If Two String Arrays are Equivalent.
//or
class Solution {
    public boolean arrayStringsAreEqual(String[] word1, String[] word2) {
        String concateString1 = String.join("",word1);
        String concateString2 = String.join("",word2);
        int compare = concateString1.compareTo(concateString2);
        if(compare == 0) return true;
        else return false;
    }
}
// Runtime: 1 ms, faster than 42.86% of Java online submissions for Check If Two String Arrays are Equivalent.
// Memory Usage: 37.3 MB, less than 57.14% of Java online submissions for Check If Two String Arrays are Equivalent.
// or
class Solution {
    public boolean arrayStringsAreEqual(String[] word1, String[] word2) {
        return (String.join("", word1)).equals(String.join("", word2));
    }
}
// Runtime: 1 ms, faster than 42.86% of Java online submissions for Check If Two String Arrays are Equivalent.
// Memory Usage: 37 MB, less than 85.71% of Java online submissions for Check If Two String Arrays are Equivalent.
class Solution {
    public boolean arrayStringsAreEqual(String[] word1, String[] word2) {
        String concateWord1 = String.join("", word1);
        String concateWord2 = String.join("", word2);
        char[] arrayWord1 = concateWord1.toCharArray();
        char[] arrayWord2 = concateWord2.toCharArray();
        int count=0;
        if(arrayWord1.length != arrayWord2.length) return false;
        for(int i=0; i<arrayWord1.length ; i++){
            if(arrayWord1[i] != arrayWord2[i]){
                count++;
            }
        }
        if(count == 0) return true;
        else return false;
    }
}
//Runtime: 2 ms, faster than 42.86% of Java online submissions for Check If Two String Arrays are Equivalent.
//Memory Usage: 37.3 MB, less than 42.86% of Java online submissions for Check If Two String Arrays are Equivalent.
