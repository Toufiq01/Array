//using HashMap
class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        HashMap<Integer,Integer> map = new HashMap<>();
        int[] result = new int[nums.length];
        int[] copy = nums.clone();
        Arrays.sort(copy);
        for(int i=0; i<nums.length; i++){
            map.putIfAbsent(copy[i], i);
        }
        for(int i=0; i<nums.length; i++){
            result[i] = map.get(nums[i]);
        }
        return result;
    }
}
// Runtime: 3 ms, faster than 72.88% of Java online submissions for How Many Numbers Are Smaller Than the Current Number.
// Memory Usage: 39.3 MB, less than 26.61% of Java online submissions for How Many Numbers Are Smaller Than the Current Number.
//or
class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int[] result = new int[nums.length];
        for(int i=0; i<nums.length; i++){
            int count = 0;
            for(int j=0; j<nums.length; j++){
                if(nums[i]>nums[j]) count++;
            }
            result[i] = count;
        }
        return result;
    }
}
// Runtime: 14 ms, faster than 17.61% of Java online submissions for How Many Numbers Are Smaller Than the Current Number.
// Memory Usage: 41.1 MB, less than 6.23% of Java online submissions for How Many Numbers Are Smaller Than the Current Number.
//or
class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        //HashMap<Integer,Integer> map = new HashMap<>();
        int[] result = new int[nums.length];
        int[] count = new int[101];
        for(int i = 0; i<count.length ;i++) count[i]=-1;
        //System.out.print (count[300]);
        int[] copy = nums.clone();
        int j=0;
        Arrays.sort(copy);
        for(int i=0; i<nums.length; i++){
            if(count[copy[i]]==-1) {
                count[copy[i]] = i;
            } 
        }
        for(int i=0; i<nums.length; i++){
            result[i] = count[nums[i]];
        }
        return result;
    }
}
// Runtime: 2 ms, faster than 75.65% of Java online submissions for How Many Numbers Are Smaller Than the Current Number.
// Memory Usage: 39.2 MB, less than 53.31% of Java online submissions for How Many Numbers Are Smaller Than the Current Number.
